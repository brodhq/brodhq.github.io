{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport matter from 'gray-matter';\nimport marked from 'marked';\nimport yaml from 'js-yaml';\nimport path from 'path';\nimport { CustomRenderer } from './renderer';\nimport { sluggify } from '@utils';\nexport async function getAllPosts() {\n  // @ts-expect-error\n  const context = require.context('../content/blog', false, /\\.md$/);\n\n  const posts = [];\n\n  for (const key of context.keys()) {\n    const post = key.slice(2);\n    const dateString = post.slice(0, 10);\n    const content = await import(`../content/blog/${post}`);\n    const meta = matter(content.default);\n    posts.push(_objectSpread(_objectSpread({}, meta.data), {}, {\n      slug: post.replace('.md', ''),\n      date: dateString\n    }));\n  }\n\n  return posts;\n}\nexport async function getAllCases() {\n  // @ts-expect-error\n  const context = require.context('../content/blog', false, /\\.md$/);\n\n  const posts = [];\n\n  for (const key of context.keys()) {\n    const post = key.slice(2);\n    const content = await import(`../content/blog/${post}`);\n    const meta = matter(content.default);\n\n    if (meta.data.category && sluggify(meta.data.category) === 'geis-in-production') {\n      var _meta$data$tags;\n\n      posts.push(_objectSpread(_objectSpread({}, meta.data), {}, {\n        slug: post.replace('.md', ''),\n        tags: (_meta$data$tags = meta.data.tags) === null || _meta$data$tags === void 0 ? void 0 : _meta$data$tags.split(' ')\n      }));\n    }\n  }\n\n  return posts;\n}\nexport async function getAllReleases() {\n  const posts = await getAllPosts();\n  return posts.filter(post => post.category && sluggify(post.category) === 'releases');\n}\nexport async function getAllSections() {\n  const sections = [];\n  const contexts = [['getting-started', // @ts-expect-error\n  require.context(`../content/guides/getting-started`, false, /\\.md$/)], ['metaprogramming', // @ts-expect-error\n  require.context(`../content/guides/metaprogramming`, false, /\\.md$/)]];\n\n  for (let [sectionName, context] of contexts) {\n    const guides = [];\n\n    for (const key of context.keys()) {\n      const post = key.slice(2);\n      const number = Number(post.slice(0, 2));\n      const content = await import(`../content/guides/${sectionName}/${post}`);\n      const meta = matter(content.default);\n      guides.push({\n        number,\n        section: meta.data.section,\n        filename: post,\n        title: meta.data.title,\n        slug: `${sectionName}/${meta.data.slug}`\n      });\n    }\n\n    sections.push({\n      name: sectionName.replace('-', ' '),\n      guides\n    });\n  }\n\n  return sections;\n}\nexport async function getPostBySlug(slug) {\n  const posts = await getAllPosts();\n  const reference = posts.find(guide => guide.slug === slug);\n  const fileContent = await import(`../content/blog/${slug}.md`);\n  const meta = matter(fileContent.default);\n  const renderer = new CustomRenderer();\n  const content = marked(meta.content, {\n    renderer\n  });\n  return {\n    post: reference,\n    content: content,\n    releases: await getAllReleases()\n  };\n}\nexport async function getByGuideSlug(slugs) {\n  const slug = path.join(...slugs);\n  const sections = await getAllSections();\n  const all = sections.flatMap(section => section.guides);\n  const reference = all.find(guide => guide.slug === slug);\n  const fileContent = await import(`../content/guides/${reference.section}/${reference.filename}`);\n  const meta = matter(fileContent.default);\n  const renderer = new CustomRenderer();\n  const content = marked(meta.content, {\n    renderer,\n    headerIds: true\n  });\n  return _objectSpread(_objectSpread({}, reference), {}, {\n    subsections: renderer.subsections,\n    content: content\n  });\n}\nexport async function getContentBySlug(slug) {\n  const posts = await getAllPosts();\n  const reference = posts.find(guide => guide.slug === slug);\n  const fileContent = await import(`../content/${slug}.md`);\n  const meta = matter(fileContent.default);\n  const renderer = new CustomRenderer();\n  const content = marked(meta.content, {\n    renderer\n  });\n  return _objectSpread(_objectSpread({}, reference), {}, {\n    content: content,\n    releases: await getAllReleases()\n  });\n}\nexport async function getConfig() {\n  const config = await import(`../config.yml`);\n  return yaml.load(config.default);\n}\nexport * from './types';","map":null,"metadata":{},"sourceType":"module"}