{"pageProps":{"guide":{"number":4,"section":"getting-started","filename":"04-protocols.md","title":"Protocols","slug":"getting-started/protocols","content":"<p class=\"prose\">In the <a href=\"/getting-started/basic-types.html\">previous chapter</a>, we saw Geis provides <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">+</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">-</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">*</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">/</span> as arithmetic operators, plus the functions <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">div/2</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">rem/2</span> for integer division and remainder.</p><p class=\"prose\">Geis also provides <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">++</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">--</span> to manipulate lists:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; [</span><span style=\"color:#d19a66\">1</span><span>, </span><span style=\"color:#d19a66\">2</span><span>, </span><span style=\"color:#d19a66\">3</span><span>] ++ [</span><span style=\"color:#d19a66\">4</span><span>, </span><span style=\"color:#d19a66\">5</span><span>, </span><span style=\"color:#d19a66\">6</span><span>]\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>[</span><span style=\"color:#d19a66\">1</span><span>, </span><span style=\"color:#d19a66\">2</span><span>, </span><span style=\"color:#d19a66\">3</span><span>, </span><span style=\"color:#d19a66\">4</span><span>, </span><span style=\"color:#d19a66\">5</span><span>, </span><span style=\"color:#d19a66\">6</span><span>]\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>iex&gt; [</span><span style=\"color:#d19a66\">1</span><span>, </span><span style=\"color:#d19a66\">2</span><span>, </span><span style=\"color:#d19a66\">3</span><span>] -- [</span><span style=\"color:#d19a66\">2</span><span>]\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span>[</span><span style=\"color:#d19a66\">1</span><span>, </span><span style=\"color:#d19a66\">3</span><span>]</span></code></pre></div><p class=\"prose\">String concatenation is done with <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">&amp;lt;&amp;gt;</span>:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; </span><span style=\"color:#98c379\">&quot;foo&quot;</span><span> &lt;&gt; </span><span style=\"color:#98c379\">&quot;bar&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#98c379\">&quot;foobar&quot;</span></code></pre></div><p class=\"prose\">Geis also provides three boolean operators: <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">or</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">and</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">not</span>. These operators are strict in the sense that they expect something that evaluates to a boolean (<span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">true</span> or <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">false</span>) as their first argument:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; </span><span style=\"color:#56b6c2\">true</span><span> and </span><span style=\"color:#56b6c2\">true</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#56b6c2\">true</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>iex&gt; </span><span style=\"color:#56b6c2\">false</span><span> or is_atom(:example)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span></span><span style=\"color:#56b6c2\">true</span></code></pre></div><p class=\"prose\">Providing a non-boolean will raise an exception:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; </span><span style=\"color:#d19a66\">1</span><span> and </span><span style=\"color:#56b6c2\">true</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>** (BadBooleanError) expected a </span><span style=\"color:#e6c07b\">boolean</span><span> on left-side </span><span style=\"color:#c678dd\">of</span><span> </span><span style=\"color:#98c379\">&quot;and&quot;</span><span>, </span><span style=\"color:#d19a66\">got</span><span>: </span><span style=\"color:#d19a66\">1</span></code></pre></div><p class=\"prose\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">or</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">and</span> are short-circuit operators. They only execute the right side if the left side is not enough to determine the result:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; </span><span style=\"color:#56b6c2\">false</span><span> and raise(</span><span style=\"color:#98c379\">&quot;This error will never be raised&quot;</span><span>)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#56b6c2\">false</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>iex&gt; </span><span style=\"color:#56b6c2\">true</span><span> or raise(</span><span style=\"color:#98c379\">&quot;This error will never be raised&quot;</span><span>)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span></span><span style=\"color:#56b6c2\">true</span></code></pre></div><blockquote>\n<p class=\"prose\">Note: If you are an Erlang developer, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">and</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">or</span> in Geis actually map to the <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">andalso</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">orelse</span> operators in Erlang.</p></blockquote>\n<p class=\"prose\">Besides these boolean operators, Geis also provides <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">||</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">&amp;amp;&amp;amp;</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">!</span> which accept arguments of any type. For these operators, all values except <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">false</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">nil</span> will evaluate to true:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span># or\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>iex&gt; </span><span style=\"color:#d19a66\">1</span><span> || </span><span style=\"color:#56b6c2\">true</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span></span><span style=\"color:#d19a66\">1</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span>iex&gt; </span><span style=\"color:#56b6c2\">false</span><span> || </span><span style=\"color:#d19a66\">11</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span><span></span><span style=\"color:#d19a66\">11</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">7</span># and\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">8</span><span>iex&gt; nil &amp;&amp; </span><span style=\"color:#d19a66\">13</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">9</span>nil\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">10</span><span>iex&gt; </span><span style=\"color:#56b6c2\">true</span><span> &amp;&amp; </span><span style=\"color:#d19a66\">17</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">11</span><span></span><span style=\"color:#d19a66\">17</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">12</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">13</span># not\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">14</span><span>iex&gt; !</span><span style=\"color:#56b6c2\">true</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">15</span><span></span><span style=\"color:#56b6c2\">false</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">16</span><span>iex&gt; !</span><span style=\"color:#d19a66\">1</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">17</span><span></span><span style=\"color:#56b6c2\">false</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">18</span>iex&gt; !nil\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">19</span><span></span><span style=\"color:#56b6c2\">true</span></code></pre></div><p class=\"prose\">As a rule of thumb, use <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">and</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">or</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">not</span> when you are expecting booleans. If any of the arguments are non-boolean, use <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">&amp;amp;&amp;amp;</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">||</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">!</span>.</p><p class=\"prose\">Geis also provides <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">==</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">!=</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">===</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">!==</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">&amp;lt;=</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">&amp;gt;=</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">&amp;lt;</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">&amp;gt;</span> as comparison operators:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; </span><span style=\"color:#d19a66\">1</span><span> == </span><span style=\"color:#d19a66\">1</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#56b6c2\">true</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>iex&gt; </span><span style=\"color:#d19a66\">1</span><span> != </span><span style=\"color:#d19a66\">2</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span></span><span style=\"color:#56b6c2\">true</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span><span>iex&gt; </span><span style=\"color:#d19a66\">1</span><span> &lt; </span><span style=\"color:#d19a66\">2</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span><span></span><span style=\"color:#56b6c2\">true</span></code></pre></div><p class=\"prose\">The difference between <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">==</span> and <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">===</span> is that the latter is more strict when comparing integers and floats:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; </span><span style=\"color:#d19a66\">1</span><span> == </span><span style=\"color:#d19a66\">1.0</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#56b6c2\">true</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>iex&gt; </span><span style=\"color:#d19a66\">1</span><span> === </span><span style=\"color:#d19a66\">1.0</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span></span><span style=\"color:#56b6c2\">false</span></code></pre></div><p class=\"prose\">In Geis, we can compare two different data types:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; </span><span style=\"color:#d19a66\">1</span><span> &lt; :atom\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#56b6c2\">true</span></code></pre></div><p class=\"prose\">The reason we can compare different data types is pragmatism. Sorting algorithms don&#39;t need to worry about different data types in order to sort. The overall sorting order is defined below:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span style=\"color:#e6c07b\">number</span><span> &lt; atom &lt; reference &lt; </span><span class=\"hljs-function\" style=\"color:#c678dd\">function</span><span class=\"hljs-function\"> &lt; </span><span class=\"hljs-function\" style=\"color:#61aeee\">port</span><span class=\"hljs-function\"> &lt; </span><span class=\"hljs-function\" style=\"color:#61aeee\">pid</span><span class=\"hljs-function\"> &lt; </span><span class=\"hljs-function\" style=\"color:#61aeee\">tuple</span><span class=\"hljs-function\"> &lt; </span><span class=\"hljs-function\" style=\"color:#61aeee\">map</span><span class=\"hljs-function\"> &lt; </span><span class=\"hljs-function\" style=\"color:#61aeee\">list</span><span class=\"hljs-function\"> &lt; </span><span class=\"hljs-function\" style=\"color:#61aeee\">bitstring</span></code></pre></div><p class=\"prose\">You don&#39;t actually need to memorize this ordering; it&#39;s enough to know that this ordering exists.</p><p class=\"prose\">For reference information about operators (and ordering), check the <a href=\"https://hexdocs.pm/geis/operators.html\">reference page on operators</a>.</p><p class=\"prose\">In the next chapter, we are going to discuss pattern matching through the use of <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">=</span>, the match operator.</p>","subsections":[],"previous":{"number":2,"section":"getting-started","filename":"02-types.md","title":"Types","slug":"getting-started/types"},"next":{"number":5,"section":"getting-started","filename":"05-providers.md","title":"Providers","slug":"getting-started/providers"}},"sections":[{"name":"getting started","guides":[{"number":1,"section":"getting-started","filename":"01-introduction.md","title":"Introduction","slug":"getting-started/introduction"},{"number":2,"section":"getting-started","filename":"02-types.md","title":"Types","slug":"getting-started/types"},{"number":4,"section":"getting-started","filename":"04-protocols.md","title":"Protocols","slug":"getting-started/protocols"},{"number":5,"section":"getting-started","filename":"05-providers.md","title":"Providers","slug":"getting-started/providers"},{"number":6,"section":"getting-started","filename":"06-parsing.md","title":"Parsing","slug":"getting-started/parsing"},{"number":7,"section":"getting-started","filename":"07-errors.md","title":"Error Handling","slug":"getting-started/errors"}]},{"name":"metaprogramming","guides":[{"number":1,"section":"metaprogramming","filename":"01-quote-and-unquote.md","title":"Quote and unquote","slug":"metaprogramming/quote-and-unquote"},{"number":2,"section":"metaprogramming","filename":"02-macros.md","title":"Macros","slug":"metaprogramming/macros"}]}],"releases":[{"title":"Brod v0.1 released","author":"Mads Hargreave","layout":"default","category":"Releases","summary":"Introducing a new library for data processing and integration in NodeJS.","tags":"network","image":"movie-ready-go.jpg","slug":"release","date":"2021-06-08","content":"\nCommunity is a platform that enables instant and direct communication with the people you want to reach, using the simplicity of text messaging. Used by names like Paul McCartney, Metallica, and Barack Obama, Community connects small businesses, stars, and high-profile individuals directly to their audiences.\n\nCommunity is powered by the Erlang Ecosystem, with Brod and RabbitMQ playing central roles. This article gives an overview of the system and the tools used to handle spikes of million of users caused by events such as this tweet:\n\n## The first steps with Brod\n\nTomas Koci and Ustin Zarubin were the two engineers behind Community’s initial implementation. The company was pivoting from a product they had written in Go and they felt the language was not expressive enough for the products they were building. So when faced with the challenge of developing a social messaging platform on top of SMS, they were open to trying a different stack.\n"}]},"__N_SSG":true}