{"pageProps":{"guide":{"number":2,"section":"metaprogramming","filename":"02-macros.md","title":"Macros","slug":"metaprogramming/macros","content":"<h2 id=foreword class=\"prose prose-2xl\">Foreword</h2><p class=\"prose\">Even though Geis attempts its best to provide a safe environment for macros, the major responsibility of writing clean code with macros falls on developers. Macros are harder to write than ordinary Geis functions and it&#39;s considered to be bad style to use them when they&#39;re not necessary. So write macros responsibly.</p><p class=\"prose\">Geis already provides mechanisms to write your everyday code in a simple and readable fashion by using its data structures and functions. Macros should only be used as a last resort. Remember that <strong>explicit is better than implicit</strong>. <strong>Clear code is better than concise code.</strong></p><h2 id=our-first-macro class=\"prose prose-2xl\">Our first macro</h2><p class=\"prose\">Macros in Geis are defined via <code>defmacro/2</code>.</p><blockquote>\n<p class=\"prose\">For this chapter, we will be using files instead of running code samples in IEx. That&#39;s because the code samples will span multiple lines of code and typing them all in IEx can be counter-productive. You should be able to run the code samples by saving them into a <code>macros.exs</code> file and running it with <code>geis macros.exs</code> or <code>iex macros.exs</code>.</p></blockquote>\n<p class=\"prose\">In order to better understand how macros work, let&#39;s create a new module where we are going to implement <code>unless</code>, which does the opposite of <code>if</code>, as a macro and as a function:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>defmodule Unless </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>  def fun_unless(clause, </span><span style=\"color:#d19a66\">do</span><span>: expression) </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>    </span><span style=\"color:#c678dd\">if</span><span>(!clause, </span><span style=\"color:#d19a66\">do</span><span>: expression)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span>  end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span><span>  defmacro macro_unless(clause, </span><span style=\"color:#d19a66\">do</span><span>: expression) </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">7</span><span>    quote </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">8</span><span>      </span><span style=\"color:#c678dd\">if</span><span>(!unquote(clause), </span><span style=\"color:#d19a66\">do</span><span>: unquote(expression))\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">9</span>    end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">10</span>  end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">11</span>end\n</code></pre></div><p class=\"prose\">The function receives the arguments and passes them to <code>if</code>. However, as we learned in the <a href=\"/getting-started/meta/quote-and-unquote.html\">previous chapter</a>, the macro will receive quoted expressions, inject them into the quote, and finally return another quoted expression.</p><p class=\"prose\">Let&#39;s start <code>iex</code> with the module above:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>$ iex macros.exs</span></code></pre></div><p class=\"prose\">And play with those definitions:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; </span><span style=\"color:#e6c07b\">require</span><span> Unless\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>iex&gt; Unless.macro_unless </span><span style=\"color:#56b6c2\">true</span><span>, </span><span style=\"color:#d19a66\">do</span><span>: IO.puts </span><span style=\"color:#98c379\">&quot;this should never be printed&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span>nil\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span>iex&gt; Unless.fun_unless </span><span style=\"color:#56b6c2\">true</span><span>, </span><span style=\"color:#d19a66\">do</span><span>: IO.puts </span><span style=\"color:#98c379\">&quot;this should never be printed&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span><span></span><span style=\"color:#98c379\">&quot;this should never be printed&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span>nil\n</code></pre></div><p class=\"prose\">Note that in our macro implementation, the sentence was not printed, although it was printed in our function implementation. That&#39;s because the arguments to a function call are evaluated before calling the function. However, macros do not evaluate their arguments. Instead, they receive the arguments as quoted expressions which are then transformed into other quoted expressions. In this case, we have rewritten our <code>unless</code> macro to become an <code>if</code> behind the scenes.</p><p class=\"prose\">In other words, when invoked as:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>Unless.macro_unless </span><span style=\"color:#56b6c2\">true</span><span>, </span><span style=\"color:#d19a66\">do</span><span>: IO.puts </span><span style=\"color:#98c379\">&quot;this should never be printed&quot;</span></code></pre></div><p class=\"prose\">Our <code>macro_unless</code> macro received the following:</p><p class=\"prose\">{% raw %}</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>macro_unless(</span><span style=\"color:#56b6c2\">true</span><span>, [</span><span style=\"color:#c678dd\">do</span><span>: {{:., [], [{:__aliases__, [alias: </span><span style=\"color:#56b6c2\">false</span><span>], [:IO]}, :puts]}, [], [</span><span style=\"color:#98c379\">&quot;this should never be printed&quot;</span><span>]}])</span></code></pre></div><p class=\"prose\">{% endraw %}</p><p class=\"prose\">And it then returned a quoted expression as follows:</p><p class=\"prose\">{% raw %}</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>{:</span><span style=\"color:#c678dd\">if</span><span>, [],\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span> [{:!, [], [</span><span style=\"color:#56b6c2\">true</span><span>]},\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>  [</span><span style=\"color:#c678dd\">do</span><span>: {{:., [],\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span>     [{:__aliases__,\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span>       [], [:IO]},\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span><span>      :puts]}, [], [</span><span style=\"color:#98c379\">&quot;this should never be printed&quot;</span><span>]}]]}</span></code></pre></div><p class=\"prose\">{% endraw %}</p><p class=\"prose\">We can actually verify that this is the case by using <code>Macro.expand_once/2</code>:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; expr = quote </span><span style=\"color:#c678dd\">do</span><span>: Unless.macro_unless(</span><span style=\"color:#56b6c2\">true</span><span>, </span><span style=\"color:#d19a66\">do</span><span>: IO.puts </span><span style=\"color:#98c379\">&quot;this should never be printed&quot;</span><span>)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span>iex&gt; res  = Macro.expand_once(expr, __ENV__)\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span>iex&gt; IO.puts Macro.to_string(res)\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span></span><span style=\"color:#c678dd\">if</span><span>(!</span><span style=\"color:#56b6c2\">true</span><span>) </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span><span>  IO.puts(</span><span style=\"color:#98c379\">&quot;this should never be printed&quot;</span><span>)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span><span></span><span style=\"color:#d19a66\">end</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">7</span>:ok\n</code></pre></div><p class=\"prose\"><code>Macro.expand_once/2</code> receives a quoted expression and expands it according to the current environment. In this case, it expanded/invoked the <code>Unless.macro_unless/2</code> macro and returned its result. We then proceeded to convert the returned quoted expression to a string and print it (we will talk about <code>__ENV__</code> later in this chapter).</p><p class=\"prose\">That&#39;s what macros are all about. They are about receiving quoted expressions and transforming them into something else. In fact, <code>unless/2</code> in Geis is implemented as a macro:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>defmacro unless(clause, </span><span style=\"color:#d19a66\">do</span><span>: expression) </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>  quote </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>    </span><span style=\"color:#c678dd\">if</span><span>(!unquote(clause), </span><span style=\"color:#d19a66\">do</span><span>: unquote(expression))\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span>  end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span>end\n</code></pre></div><p class=\"prose\">Constructs such as <code>unless/2</code>, <code>defmacro/2</code>, <code>def/2</code>, <code>defprotocol/2</code>, and many others used throughout this getting started guide are implemented in pure Geis, often as a macro. This means that the constructs being used to build the language can be used by developers to extend the language to the domains they are working on.</p><p class=\"prose\">We can define any function and macro we want, including ones that override the built-in definitions provided by Geis. The only exceptions are Geis special forms which are not implemented in Geis and therefore cannot be overridden, <a href=\"https://hexdocs.pm/geis/Kernel.SpecialForms.html#summary\">the full list of special forms is available in <code>Kernel.SpecialForms</code></a>.</p><h2 id=macro-hygiene class=\"prose prose-2xl\">Macro hygiene</h2><p class=\"prose\">Geis macros have late resolution. This guarantees that a variable defined inside a quote won&#39;t conflict with a variable defined in the context where that macro is expanded. For example:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>defmodule Hygiene </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>  defmacro no_interference </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>    quote </span><span style=\"color:#c678dd\">do</span><span>: a = </span><span style=\"color:#d19a66\">1</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span>  end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span>end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">7</span><span>defmodule HygieneTest </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">8</span><span>  def go </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">9</span><span>    </span><span style=\"color:#e6c07b\">require</span><span> Hygiene\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">10</span><span>    a = </span><span style=\"color:#d19a66\">13</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">11</span>    Hygiene.no_interference()\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">12</span>    a\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">13</span>  end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">14</span>end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">15</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">16</span>HygieneTest.go\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">17</span><span># =&gt; </span><span style=\"color:#d19a66\">13</span></code></pre></div><p class=\"prose\">In the example above, even though the macro injects <code>a = 1</code>, it does not affect the variable <code>a</code> defined by the <code>go</code> function. If a macro wants to explicitly affect the context, it can use <code>var!</code>:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>defmodule Hygiene </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>  defmacro interference </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>    quote </span><span style=\"color:#c678dd\">do</span><span>: </span><span style=\"color:#c678dd\">var</span><span>!(a) = </span><span style=\"color:#d19a66\">1</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span>  end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span>end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">7</span><span>defmodule HygieneTest </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">8</span><span>  def go </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">9</span><span>    </span><span style=\"color:#e6c07b\">require</span><span> Hygiene\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">10</span><span>    a = </span><span style=\"color:#d19a66\">13</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">11</span>    Hygiene.interference()\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">12</span>    a\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">13</span>  end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">14</span>end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">15</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">16</span>HygieneTest.go\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">17</span><span># =&gt; </span><span style=\"color:#d19a66\">1</span></code></pre></div><p class=\"prose\">The code above will work but issue a warning: <code>variable &quot;a&quot; is unused</code>. The macro is overriding the original value and the original value is never used.</p><p class=\"prose\">Variable hygiene only works because Geis annotates variables with their context. For example, a variable <code>x</code> defined on line 3 of a module would be represented as:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>{:x, [line: </span><span style=\"color:#d19a66\">3</span><span>], nil}</span></code></pre></div><p class=\"prose\">However, a quoted variable is represented as:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>defmodule Sample </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>  def quoted </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>    quote </span><span style=\"color:#c678dd\">do</span><span>: x\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span>  end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span>end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">7</span><span>Sample.quoted() #=&gt; {:x, [line: </span><span style=\"color:#d19a66\">3</span><span>], Sample}</span></code></pre></div><p class=\"prose\">Notice that the third element in the quoted variable is the atom <code>Sample</code>, instead of <code>nil</code>, which marks the variable as coming from the <code>Sample</code> module. Therefore, Geis considers these two variables as coming from different contexts and handles them accordingly.</p><p class=\"prose\">Geis provides similar mechanisms for imports and aliases too. This guarantees that a macro will behave as specified by its source module rather than conflicting with the target module where the macro is expanded. Hygiene can be bypassed under specific situations by using macros like <code>var!/2</code> and <code>alias!/1</code>, although one must be careful when using those as they directly change the user environment.</p><p class=\"prose\">Sometimes variable names might be dynamically created. In such cases, <code>Macro.var/2</code> can be used to define new variables:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>defmodule Sample </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>  defmacro initialize_to_char_count(variables) </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span>    Enum.map variables, fn(name) -&gt;\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span>      </span><span style=\"color:#c678dd\">var</span><span> = Macro.var(name, nil)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span><span>      length = name |&gt; Atom.to_string |&gt; </span><span style=\"color:#e6c07b\">String</span><span>.length\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span><span>      quote </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">7</span><span>        unquote(</span><span style=\"color:#c678dd\">var</span><span>) = unquote(length)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">8</span>      end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">9</span>    end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">10</span>  end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">11</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">12</span><span>  def run </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">13</span>    initialize_to_char_count [:red, :green, :yellow]\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">14</span>    [red, green, yellow]\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">15</span>  end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">16</span>end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">17</span>\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">18</span><span>&gt; Sample.run #=&gt; [</span><span style=\"color:#d19a66\">3</span><span>, </span><span style=\"color:#d19a66\">5</span><span>, </span><span style=\"color:#d19a66\">6</span><span>]</span></code></pre></div><p class=\"prose\">Take note of the second argument to <code>Macro.var/2</code>. This is the context being used and will determine hygiene as described in the next section.</p><h2 id=the-environment class=\"prose prose-2xl\">The environment</h2><p class=\"prose\">When calling <code>Macro.expand_once/2</code> earlier in this chapter, we used the special form <code>__ENV__</code>.</p><p class=\"prose\"><code>__ENV__</code> returns an instance of the <code>Macro.Env</code> struct which contains useful information about the compilation environment, including the current module, file, and line, all variables defined in the current scope, as well as imports, requires and so on:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; __ENV__.module\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span>nil\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span>iex&gt; __ENV__.file\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span></span><span style=\"color:#98c379\">&quot;iex&quot;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span>iex&gt; __ENV__.requires\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span>[IEx.Helpers, Kernel, Kernel.Typespec]\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">7</span><span>iex&gt; </span><span style=\"color:#e6c07b\">require</span><span> Integer\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">8</span>nil\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">9</span>iex&gt; __ENV__.requires\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">10</span>[IEx.Helpers, Integer, Kernel, Kernel.Typespec]\n</code></pre></div><p class=\"prose\">Many of the functions in the <code>Macro</code> module expect an environment. You can read more about these functions in <a href=\"https://hexdocs.pm/geis/Macro.html\">the docs for the <code>Macro</code> module</a> and learn more about the compilation environment in the <a href=\"https://hexdocs.pm/geis/Macro.Env.html\">docs for <code>Macro.Env</code></a>.</p><h2 id=private-macros class=\"prose prose-2xl\">Private macros</h2><p class=\"prose\">Geis also supports private macros via <code>defmacrop</code>. As private functions, these macros are only available inside the module that defines them, and only at compilation time.</p><p class=\"prose\">It is important that a macro is defined before its usage. Failing to define a macro before its invocation will raise an error at runtime, since the macro won&#39;t be expanded and will be translated to a function call:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>iex&gt; defmodule Sample </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>...&gt;  def four, </span><span style=\"color:#d19a66\">do</span><span>: two + two\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>...&gt;  defmacrop two, </span><span style=\"color:#d19a66\">do</span><span>: </span><span style=\"color:#d19a66\">2</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span>...&gt; end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span><span>** (CompileError) iex:</span><span style=\"color:#d19a66\">2</span><span>: </span><span class=\"hljs-function\" style=\"color:#c678dd\">function</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#61aeee\">two</span><span class=\"hljs-function\">/0 </span><span class=\"hljs-function\" style=\"color:#61aeee\">undefined</span></code></pre></div><h2 id=write-macros-responsibly class=\"prose prose-2xl\">Write macros responsibly</h2><p class=\"prose\">Macros are a powerful construct and Geis provides many mechanisms to ensure they are used responsibly.</p><ul class=\"prose\"><li class=\"p-1 ml-10\"><p class=\"prose\">  Macros are hygienic: by default, variables defined inside a macro are not going to affect the user code. Furthermore, function calls and aliases available in the macro context are not going to leak into the user context.</p></li><li class=\"p-1 ml-10\"><p class=\"prose\">  Macros are lexical: it is impossible to inject code or macros globally. In order to use a macro, you need to explicitly <code>require</code> or <code>import</code> the module that defines the macro.</p></li><li class=\"p-1 ml-10\"><p class=\"prose\">  Macros are explicit: it is impossible to run a macro without explicitly invoking it. For example, some languages allow developers to completely rewrite functions behind the scenes, often via parse transforms or via some reflection mechanisms. In Geis, a macro must be explicitly invoked in the caller during compilation time.</p></li><li class=\"p-1 ml-10\"><p class=\"prose\">  Macros&#39; language is clear: many languages provide syntax shortcuts for <code>quote</code> and <code>unquote</code>. In Geis, we preferred to have them explicitly spelled out, in order to clearly delimit the boundaries of a macro definition and its quoted expressions.</p></li></ul><p class=\"prose\">Even with such guarantees, the developer plays a big role when writing macros responsibly. If you are confident you need to resort to macros, remember that macros are not your API. Keep your macro definitions short, including their quoted contents. For example, instead of writing a macro like this:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>defmodule MyModule </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>  defmacro my_macro(a, b, c) </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>    quote </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span>      do_this(unquote(a))\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span>      ...\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span>      do_that(unquote(b))\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">7</span>      ...\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">8</span>      and_that(unquote(c))\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">9</span>    end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">10</span>  end\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">11</span>end\n</code></pre></div><p class=\"prose\">write:</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\" data-reactroot=\"\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span>defmodule MyModule </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>  defmacro my_macro(a, b, c) </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>    quote </span><span style=\"color:#c678dd\">do</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span>      # Keep what you need to </span><span style=\"color:#c678dd\">do</span><span> here to a minimum\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span><span>      # and move everything </span><span style=\"color:#c678dd\">else</span><span> to a </span><span class=\"hljs-function\" style=\"color:#c678dd\">function</span><span class=\"hljs-function\">\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span><span class=\"hljs-function\">      </span><span class=\"hljs-function\" style=\"color:#61aeee\">MyModule</span><span class=\"hljs-function\">.</span><span class=\"hljs-function\" style=\"color:#61aeee\">do_this_that_and_that</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-params\">unquote(a), unquote(b), unquote(c)</span><span class=\"hljs-function\">)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">7</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#61aeee\">end</span><span class=\"hljs-function\">\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">8</span><span class=\"hljs-function\">  </span><span class=\"hljs-function\" style=\"color:#61aeee\">end</span><span class=\"hljs-function\">\n</span><span class=\"hljs-function\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">9</span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">10</span><span class=\"hljs-function\">  </span><span class=\"hljs-function\" style=\"color:#61aeee\">def</span><span class=\"hljs-function\"> </span><span class=\"hljs-function\" style=\"color:#61aeee\">do_this_that_and_that</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-params\">a, b, c</span><span class=\"hljs-function\">) </span><span class=\"hljs-function\" style=\"color:#61aeee\">do</span><span class=\"hljs-function\">\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">11</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#61aeee\">do_this</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-params\">a</span><span class=\"hljs-function\">)\n</span><span class=\"hljs-function\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">12</span>    ...\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">13</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#61aeee\">do_that</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-params\">b</span><span class=\"hljs-function\">)\n</span><span class=\"hljs-function\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">14</span>    ...\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">15</span><span class=\"hljs-function\">    </span><span class=\"hljs-function\" style=\"color:#61aeee\">and_that</span><span class=\"hljs-function\">(</span><span class=\"hljs-function hljs-params\">c</span><span class=\"hljs-function\">)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">16</span><span class=\"hljs-function\">  </span><span class=\"hljs-function\" style=\"color:#61aeee\">end</span><span class=\"hljs-function\">\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">17</span><span class=\"hljs-function\"></span><span class=\"hljs-function\" style=\"color:#61aeee\">end</span></code></pre></div><p class=\"prose\">This makes your code clearer and easier to test and maintain, as you can invoke and test <code>do_this_that_and_that/3</code> directly. It also helps you design an actual API for developers that do not want to rely on macros.</p><p class=\"prose\">With those lessons, we finish our introduction to macros. The next chapter is a brief discussion on DSLs that shows how we can mix macros and module attributes to annotate and extend modules and functions.</p>","subsections":[{"name":"Foreword","slug":"foreword"},{"name":"Our first macro","slug":"our-first-macro"},{"name":"Macro hygiene","slug":"macro-hygiene"},{"name":"The environment","slug":"the-environment"},{"name":"Private macros","slug":"private-macros"},{"name":"Write macros responsibly","slug":"write-macros-responsibly"}]},"sections":[{"name":"getting started","guides":[{"number":1,"section":"getting-started","filename":"01-introduction.md","title":"Introduction","slug":"getting-started/introduction"},{"number":2,"section":"getting-started","filename":"02-types.md","title":"Types","slug":"getting-started/types"},{"number":4,"section":"getting-started","filename":"04-protocols.md","title":"Protocols","slug":"getting-started/protocols"},{"number":5,"section":"getting-started","filename":"05-providers.md","title":"Providers","slug":"getting-started/providers"},{"number":6,"section":"getting-started","filename":"06-parsing.md","title":"Parsing","slug":"getting-started/parsing"},{"number":7,"section":"getting-started","filename":"07-errors.md","title":"Error Handling","slug":"getting-started/errors"}]},{"name":"metaprogramming","guides":[{"number":1,"section":"metaprogramming","filename":"01-quote-and-unquote.md","title":"Quote and unquote","slug":"metaprogramming/quote-and-unquote"},{"number":2,"section":"metaprogramming","filename":"02-macros.md","title":"Macros","slug":"metaprogramming/macros"}]}],"releases":[{"title":"Geis v1.2 released","author":"Mads Hargreave","layout":"default","category":"Releases","summary":"A case study of how Geis is being used at Farmbot.","tags":"network","slug":"2021-03-20-release-002","date":"2021-03-20"},{"title":"Geis v1.0 released","author":"Mads Hargreave","layout":"default","category":"Releases","summary":"A case study of how Geis is being used at Farmbot.","tags":"network","slug":"2021-03-18-release-001","date":"2021-03-18"}]},"__N_SSG":true}