{"pageProps":{"api":{"number":2,"section":"data-types","filename":"02-html.md","title":"Html","slug":"data-types/html","content":"<h2 id=functions class=\"prose prose-2xl\">Functions</h2><h3 id=html class=\"prose prose-xl\">Html</h3><p class=\"prose\">▸ <strong>Html</strong>(<span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">content?</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">selector?</span>, <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">config?</span>): <a href=\"#htmlpath\">HtmlPath</a></p><h4 id=parameters class=\"prose prose-lg\">Parameters</h4><div class=\"flex flex-col\"><div class=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\"><div class=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\"><div class=\"overflow-hidden border-gray-200 pb-6\"><table class=\"min-w-full divide-y divide-gray-100\"><thead class=\"bg-gray-50 \"><tr>\n<th class=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider\">Name</th>\n<th class=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider\">Type</th>\n</tr>\n</thead><tbody class=\"bg-white divide-y divide-gray-200\"><tr>\n<td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">content?</span></td>\n<td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">string</span></td>\n</tr>\n<tr>\n<td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">selector?</span></td>\n<td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">string</span></td>\n</tr>\n<tr>\n<td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">config?</span></td>\n<td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">Partial</span>&lt;HtmlConfig&gt;</td>\n</tr>\n</tbody></table></div></div></div></div><h2 id=interfaces class=\"prose prose-2xl\">Interfaces</h2><h2 id=htmlpath class=\"prose prose-2xl\">Htmlpath</h2><p class=\"prose\">A HtmlPath represents a nested selection of\nproperties inside a HTML document</p><h2 id=properties class=\"prose prose-2xl\">Properties</h2><h3 id=get class=\"prose prose-xl\">get</h3><p class=\"prose\">• <strong>get</strong>: (<span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">selector</span>: <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">string</span>) =&gt; <a href=\"#htmlpath\">HtmlPath</a></p><p class=\"prose\">Extract a nested html value</p><p class=\"prose\"><strong><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">param</span></strong> A valid css selector string</p><h4 id=example class=\"prose prose-lg\">Example</h4><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span style=\"color:#c678dd\">const</span><span> html = Html(</span><span style=\"color:#98c379\">&#x27;&lt;html&gt;&lt;h1&gt;some title&lt;/h1&gt;&lt;/html&gt;&#x27;</span><span>).get(</span><span style=\"color:#98c379\">&#x27;h1&#x27;</span><span>).toString()\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#5c6370;font-style:italic\">// =&gt; &#x27;some title&#x27;</span></code></pre></div><h4 id=type-declaration class=\"prose prose-lg\">Type declaration</h4><p class=\"prose\">▸ (<span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">selector</span>): <a href=\"#htmlpath\">HtmlPath</a></p><h5 id=parameters-1 class=\"prose\">Parameters</h5><div class=\"flex flex-col\"><div class=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\"><div class=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\"><div class=\"overflow-hidden border-gray-200 pb-6\"><table class=\"min-w-full divide-y divide-gray-100\"><thead class=\"bg-gray-50 \"><tr>\n<th class=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider\">Name</th>\n<th class=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider\">Type</th>\n</tr>\n</thead><tbody class=\"bg-white divide-y divide-gray-200\"><tr>\n<td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">selector</span></td>\n<td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">string</span></td>\n</tr>\n</tbody></table></div></div></div></div><p class=\"prose\">#___</p><h3 id=toarray class=\"prose prose-xl\">toArray</h3><p class=\"prose\">• <strong>toArray</strong>: () =&gt; <a href=\"#htmlpath\">HtmlPath</a>[]</p><h4 id=type-declaration-1 class=\"prose prose-lg\">Type declaration</h4><p class=\"prose\">▸ (): <a href=\"#htmlpath\">HtmlPath</a>[]</p><p class=\"prose\">#___</p><h3 id=toboolean class=\"prose prose-xl\">toBoolean</h3><p class=\"prose\">• <strong>toBoolean</strong>: () =&gt; <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">boolean</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">Error</span></p><p class=\"prose\">Return boolean value</p><h4 id=example-1 class=\"prose prose-lg\">Example</h4><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span style=\"color:#c678dd\">const</span><span> html = Html(</span><span style=\"color:#98c379\">&#x27;&lt;html&gt;&lt;span&gt;true&lt;/span&gt;&lt;/html&gt;&#x27;</span><span>, </span><span style=\"color:#98c379\">&#x27;span&#x27;</span><span>).toBoolean()\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#5c6370;font-style:italic\">// =&gt; true</span></code></pre></div><h4 id=type-declaration-2 class=\"prose prose-lg\">Type declaration</h4><p class=\"prose\">▸ (): <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">boolean</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">Error</span></p><p class=\"prose\">#___</p><h3 id=tofile class=\"prose prose-xl\">toFile</h3><p class=\"prose\">• <strong>toFile</strong>: () =&gt; <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">Error</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">PendingFile</span></p><h4 id=type-declaration-3 class=\"prose prose-lg\">Type declaration</h4><p class=\"prose\">▸ (): <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">Error</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">PendingFile</span></p><p class=\"prose\">#___</p><h3 id=toimage class=\"prose prose-xl\">toImage</h3><p class=\"prose\">• <strong>toImage</strong>: () =&gt; <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">Error</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">PendingFile</span></p><h4 id=type-declaration-4 class=\"prose prose-lg\">Type declaration</h4><p class=\"prose\">▸ (): <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">Error</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">PendingFile</span></p><p class=\"prose\">#___</p><h3 id=tointeger class=\"prose prose-xl\">toInteger</h3><p class=\"prose\">• <strong>toInteger</strong>: () =&gt; <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">number</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">Error</span></p><p class=\"prose\">Return string value</p><h4 id=example-2 class=\"prose prose-lg\">Example</h4><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span style=\"color:#c678dd\">const</span><span> html = Html(</span><span style=\"color:#98c379\">&#x27;&lt;html&gt;&lt;span&gt;5&lt;/span&gt;&lt;/html&gt;&#x27;</span><span>, </span><span style=\"color:#98c379\">&#x27;span&#x27;</span><span>).toInteger()\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#5c6370;font-style:italic\">// =&gt; 5</span></code></pre></div><h4 id=type-declaration-5 class=\"prose prose-lg\">Type declaration</h4><p class=\"prose\">▸ (): <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">number</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">Error</span></p><p class=\"prose\">#___</p><h3 id=tolink class=\"prose prose-xl\">toLink</h3><p class=\"prose\">• <strong>toLink</strong>: () =&gt; <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">Error</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">LinkType</span></p><p class=\"prose\">Return a link</p><h4 id=example-3 class=\"prose prose-lg\">Example</h4><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span style=\"color:#c678dd\">const</span><span> html = Html(</span><span style=\"color:#98c379\">&#x27;&lt;html&gt;&lt;a href=&quot;http://example.com&quot;&gt;my link&lt;/a&gt;&lt;/html&gt;&#x27;</span><span>, </span><span style=\"color:#98c379\">&#x27;a&#x27;</span><span>).toLink()\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#5c6370;font-style:italic\">// =&gt; { name: &#x27;my link&#x27;, href: &#x27;http://example.com&#x27; }</span></code></pre></div><h4 id=type-declaration-6 class=\"prose prose-lg\">Type declaration</h4><p class=\"prose\">▸ (): <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">Error</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">LinkType</span></p><p class=\"prose\">#___</p><h3 id=toraw class=\"prose prose-xl\">toRaw</h3><p class=\"prose\">• <strong>toRaw</strong>: () =&gt; <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">string</span></p><h4 id=type-declaration-7 class=\"prose prose-lg\">Type declaration</h4><p class=\"prose\">▸ (): <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">string</span></p><p class=\"prose\">#___</p><h3 id=tostring class=\"prose prose-xl\">toString</h3><p class=\"prose\">• <strong>toString</strong>: () =&gt; <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">string</span></p><p class=\"prose\">Return string value</p><h4 id=example-4 class=\"prose prose-lg\">Example</h4><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span style=\"color:#c678dd\">const</span><span> html = Html(</span><span style=\"color:#98c379\">&#x27;&lt;html&gt;&lt;h1&gt;some title&lt;/h1&gt;&lt;/html&gt;&#x27;</span><span>, </span><span style=\"color:#98c379\">&#x27;h1&#x27;</span><span>).toString()\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#5c6370;font-style:italic\">// =&gt; &#x27;some title&#x27;</span></code></pre></div><h4 id=type-declaration-8 class=\"prose prose-lg\">Type declaration</h4><p class=\"prose\">▸ (): <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">null</span> | <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">string</span></p><p class=\"prose\">#___</p><h3 id=valueof class=\"prose prose-xl\">valueOf</h3><p class=\"prose\">• <strong>valueOf</strong>: () =&gt; <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">string</span></p><h4 id=type-declaration-9 class=\"prose prose-lg\">Type declaration</h4><p class=\"prose\">▸ (): <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">string</span></p><h3 id=methods class=\"prose prose-xl\">Methods</h3>","subsections":[{"name":"Html","slug":"html"},{"name":"Htmlpath","slug":"htmlpath"},{"name":"Properties","slug":"properties"},{"name":"get","slug":"get"},{"name":"toArray","slug":"toarray"},{"name":"toBoolean","slug":"toboolean"},{"name":"toFile","slug":"tofile"},{"name":"toImage","slug":"toimage"},{"name":"toInteger","slug":"tointeger"},{"name":"toLink","slug":"tolink"},{"name":"toRaw","slug":"toraw"},{"name":"toString","slug":"tostring"},{"name":"valueOf","slug":"valueof"}]},"sections":[{"name":"protocols","guides":[{"number":2,"section":"protocols","filename":"02-fetch.md","title":"Fetch","slug":"protocols/fetch"}]},{"name":"data types","guides":[{"number":1,"section":"data-types","filename":"01-json.md","title":"Json","slug":"data-types/json"},{"number":2,"section":"data-types","filename":"02-html.md","title":"Html","slug":"data-types/html"}]}],"releases":[{"title":"Krans v0.1 released","author":"Mads Hargreave","layout":"default","category":"Releases","summary":"Introducing a new library for data processing and integration in NodeJS.","tags":"network","image":"movie-ready-go.jpg","slug":"release","date":"2021-06-08","content":"\nCommunity is a platform that enables instant and direct communication with the people you want to reach, using the simplicity of text messaging. Used by names like Paul McCartney, Metallica, and Barack Obama, Community connects small businesses, stars, and high-profile individuals directly to their audiences.\n\nCommunity is powered by the Erlang Ecosystem, with Geis and RabbitMQ playing central roles. This article gives an overview of the system and the tools used to handle spikes of million of users caused by events such as this tweet:\n\n## The first steps with Geis\n\nTomas Koci and Ustin Zarubin were the two engineers behind Community’s initial implementation. The company was pivoting from a product they had written in Go and they felt the language was not expressive enough for the products they were building. So when faced with the challenge of developing a social messaging platform on top of SMS, they were open to trying a different stack.\n"}]},"__N_SSG":true}