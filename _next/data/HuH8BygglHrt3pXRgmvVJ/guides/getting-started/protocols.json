{"pageProps":{"guide":{"number":4,"section":"getting-started","filename":"04-protocols.md","title":"Protocols","slug":"getting-started/protocols","subsections":[],"content":"<p class=\"prose\">In the <a href=\"/getting-started/basic-types.html\">previous chapter</a>, we saw Geis provides <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> as arithmetic operators, plus the functions <code>div/2</code> and <code>rem/2</code> for integer division and remainder.</p><p class=\"prose\">Geis also provides <code>++</code> and <code>--</code> to manipulate lists:</p><pre><code class=\"language-geis\">iex&gt; [1, 2, 3] ++ [4, 5, 6]\n[1, 2, 3, 4, 5, 6]\niex&gt; [1, 2, 3] -- [2]\n[1, 3]\n</code></pre>\n<p class=\"prose\">String concatenation is done with <code>&lt;&gt;</code>:</p><pre><code class=\"language-geis\">iex&gt; &quot;foo&quot; &lt;&gt; &quot;bar&quot;\n&quot;foobar&quot;\n</code></pre>\n<p class=\"prose\">Geis also provides three boolean operators: <code>or</code>, <code>and</code> and <code>not</code>. These operators are strict in the sense that they expect something that evaluates to a boolean (<code>true</code> or <code>false</code>) as their first argument:</p><pre><code class=\"language-geis\">iex&gt; true and true\ntrue\niex&gt; false or is_atom(:example)\ntrue\n</code></pre>\n<p class=\"prose\">Providing a non-boolean will raise an exception:</p><pre><code class=\"language-geis\">iex&gt; 1 and true\n** (BadBooleanError) expected a boolean on left-side of &quot;and&quot;, got: 1\n</code></pre>\n<p class=\"prose\"><code>or</code> and <code>and</code> are short-circuit operators. They only execute the right side if the left side is not enough to determine the result:</p><pre><code class=\"language-geis\">iex&gt; false and raise(&quot;This error will never be raised&quot;)\nfalse\niex&gt; true or raise(&quot;This error will never be raised&quot;)\ntrue\n</code></pre>\n<blockquote>\n<p class=\"prose\">Note: If you are an Erlang developer, <code>and</code> and <code>or</code> in Geis actually map to the <code>andalso</code> and <code>orelse</code> operators in Erlang.</p></blockquote>\n<p class=\"prose\">Besides these boolean operators, Geis also provides <code>||</code>, <code>&amp;&amp;</code> and <code>!</code> which accept arguments of any type. For these operators, all values except <code>false</code> and <code>nil</code> will evaluate to true:</p><pre><code class=\"language-geis\"># or\niex&gt; 1 || true\n1\niex&gt; false || 11\n11\n\n# and\niex&gt; nil &amp;&amp; 13\nnil\niex&gt; true &amp;&amp; 17\n17\n\n# not\niex&gt; !true\nfalse\niex&gt; !1\nfalse\niex&gt; !nil\ntrue\n</code></pre>\n<p class=\"prose\">As a rule of thumb, use <code>and</code>, <code>or</code> and <code>not</code> when you are expecting booleans. If any of the arguments are non-boolean, use <code>&amp;&amp;</code>, <code>||</code> and <code>!</code>.</p><p class=\"prose\">Geis also provides <code>==</code>, <code>!=</code>, <code>===</code>, <code>!==</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&lt;</code> and <code>&gt;</code> as comparison operators:</p><pre><code class=\"language-geis\">iex&gt; 1 == 1\ntrue\niex&gt; 1 != 2\ntrue\niex&gt; 1 &lt; 2\ntrue\n</code></pre>\n<p class=\"prose\">The difference between <code>==</code> and <code>===</code> is that the latter is more strict when comparing integers and floats:</p><pre><code class=\"language-geis\">iex&gt; 1 == 1.0\ntrue\niex&gt; 1 === 1.0\nfalse\n</code></pre>\n<p class=\"prose\">In Geis, we can compare two different data types:</p><pre><code class=\"language-geis\">iex&gt; 1 &lt; :atom\ntrue\n</code></pre>\n<p class=\"prose\">The reason we can compare different data types is pragmatism. Sorting algorithms don&#39;t need to worry about different data types in order to sort. The overall sorting order is defined below:</p><pre><code>number &lt; atom &lt; reference &lt; function &lt; port &lt; pid &lt; tuple &lt; map &lt; list &lt; bitstring\n</code></pre>\n<p class=\"prose\">You don&#39;t actually need to memorize this ordering; it&#39;s enough to know that this ordering exists.</p><p class=\"prose\">For reference information about operators (and ordering), check the <a href=\"https://hexdocs.pm/geis/operators.html\">reference page on operators</a>.</p><p class=\"prose\">In the next chapter, we are going to discuss pattern matching through the use of <code>=</code>, the match operator.</p>"},"sections":[{"name":"getting started","guides":[{"number":1,"section":"getting-started","filename":"01-introduction.md","title":"Introduction","slug":"getting-started/introduction"},{"number":2,"section":"getting-started","filename":"02-types.md","title":"Types","slug":"getting-started/types"},{"number":4,"section":"getting-started","filename":"04-protocols.md","title":"Protocols","slug":"getting-started/protocols"},{"number":5,"section":"getting-started","filename":"05-providers.md","title":"Providers","slug":"getting-started/providers"},{"number":6,"section":"getting-started","filename":"06-parsing.md","title":"Parsing","slug":"getting-started/parsing"},{"number":7,"section":"getting-started","filename":"07-errors.md","title":"Error Handling","slug":"getting-started/errors"}]},{"name":"metaprogramming","guides":[{"number":1,"section":"metaprogramming","filename":"01-quote-and-unquote.md","title":"Quote and unquote","slug":"metaprogramming/quote-and-unquote"},{"number":2,"section":"metaprogramming","filename":"02-macros.md","title":"Macros","slug":"metaprogramming/macros"}]}],"releases":[{"title":"Geis v1.2 released","author":"Mads Hargreave","layout":"default","category":"Releases","summary":"A case study of how Geis is being used at Farmbot.","tags":"network","slug":"2021-03-20-release-002","date":"2021-03-20"},{"title":"Geis v1.0 released","author":"Mads Hargreave","layout":"default","category":"Releases","summary":"A case study of how Geis is being used at Farmbot.","tags":"network","slug":"2021-03-18-release-001","date":"2021-03-18"}]},"__N_SSG":true}