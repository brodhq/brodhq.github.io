{"pageProps":{"guide":{"number":2,"section":"getting-started","filename":"02-types.md","title":"Types","slug":"getting-started/types","subsections":[],"content":"<p class=\"prose\">In this chapter we will learn more about Geis basic types: integers, floats, booleans, atoms, strings, lists and tuples. Some basic types are:</p><pre><code class=\"language-geis\">iex&gt; 1          # integer\niex&gt; 0x1F       # integer\niex&gt; 1.0        # float\niex&gt; true       # boolean\niex&gt; :atom      # atom / symbol\niex&gt; &quot;geis&quot;   # string\niex&gt; [1, 2, 3]  # list\niex&gt; {1, 2, 3}  # tuple\n</code></pre>\n<h2 id=basic-arithmetic class=\"prose prose-2xl\">Basic arithmetic</h2><p class=\"prose\">Open up <code>iex</code> and type the following expressions:</p><pre><code class=\"language-geis\">iex&gt; 1 + 2\n3\niex&gt; 5 * 5\n25\niex&gt; 10 / 2\n5.0\n</code></pre>\n<p class=\"prose\">Notice that <code>10 / 2</code> returned a float <code>5.0</code> instead of an integer <code>5</code>. This is expected. In Geis, the operator <code>/</code> always returns a float. If you want to do integer division or get the division remainder, you can invoke the <code>div</code> and <code>rem</code> functions:</p><pre><code class=\"language-geis\">iex&gt; div(10, 2)\n5\niex&gt; div 10, 2\n5\niex&gt; rem 10, 3\n1\n</code></pre>\n<p class=\"prose\">Notice that Geis allows you to drop the parentheses when invoking named functions. This feature gives a cleaner syntax when writing declarations and control-flow constructs.</p><p class=\"prose\">Geis also supports shortcut notations for entering binary, octal, and hexadecimal numbers:</p><pre><code class=\"language-geis\">iex&gt; 0b1010\n10\niex&gt; 0o777\n511\niex&gt; 0x1F\n31\n</code></pre>\n<p class=\"prose\">Float numbers require a dot followed by at least one digit and also support <code>e</code> for scientific notation:</p><pre><code class=\"language-geis\">iex&gt; 1.0\n1.0\niex&gt; 1.0e-10\n1.0e-10\n</code></pre>\n<p class=\"prose\">Floats in Geis are 64-bit double precision.</p><p class=\"prose\">You can invoke the <code>round</code> function to get the closest integer to a given float, or the <code>trunc</code> function to get the integer part of a float.</p><pre><code class=\"language-geis\">iex&gt; round(3.58)\n4\niex&gt; trunc(3.58)\n3\n</code></pre>\n<h2 id=identifying-functions-and-documentation class=\"prose prose-2xl\">Identifying functions and documentation</h2><p class=\"prose\">Functions in Geis are identified by both their name and their arity. The arity of a function describes the number of arguments that the function takes. From this point on we will use both the function name and its arity to describe functions throughout the documentation. <code>trunc/1</code> identifies the function which is named <code>trunc</code> and takes <code>1</code> argument, whereas <code>trunc/2</code> identifies a different (nonexistent) function with the same name but with an arity of <code>2</code>.</p><p class=\"prose\">We can also use this syntax to access documentation. The Geis shell defines the <code>h</code> function, which you can use to access documentation for any function. For example, typing <code>h trunc/1</code> is going to print the documentation for the <code>trunc/1</code> function:</p><pre><code class=\"language-geis\">iex&gt; h trunc/1\n                             def trunc()\n\nReturns the integer part of number.\n</code></pre>\n<p class=\"prose\"><code>h trunc/1</code> works because it is defined in <code>Kernel</code> module. All functions in the <code>Kernel</code> module are automatically imported into our namespace. Most often you will also include the module name when looking up for documentation for a given function:</p><pre><code class=\"language-geis\">iex&gt; h Kernel.trunc/1\n                             def trunc()\n\nReturns the integer part of number.\n</code></pre>\n<p class=\"prose\">You can use the module+function to lookup for anything, including operators (try <code>h Kernel.+/2</code>). Invoking <code>h</code> without arguments displays the documentation for <code>IEx.Helpers</code>, which is where <code>h</code> and other functionality is defined.</p><h2 id=booleans class=\"prose prose-2xl\">Booleans</h2><p class=\"prose\">Geis supports <code>true</code> and <code>false</code> as booleans:</p><pre><code class=\"language-geis\">iex&gt; true\ntrue\niex&gt; true == false\nfalse\n</code></pre>\n<p class=\"prose\">Geis provides a bunch of predicate functions to check for a value type. For example, the <code>is_boolean/1</code> function can be used to check if a value is a boolean or not:</p><pre><code class=\"language-geis\">iex&gt; is_boolean(true)\ntrue\niex&gt; is_boolean(1)\nfalse\n</code></pre>\n<p class=\"prose\">You can also use <code>is_integer/1</code>, <code>is_float/1</code> or <code>is_number/1</code> to check, respectively, if an argument is an integer, a float, or either.</p><h2 id=atoms class=\"prose prose-2xl\">Atoms</h2><p class=\"prose\">An atom is a constant whose value is its own name. Some other languages call these symbols. They are often useful to enumerate over distinct values, such as:</p><pre><code class=\"language-geis\">iex&gt; :apple\n:apple\niex&gt; :orange\n:orange\niex&gt; :watermelon\n:watermelon\n</code></pre>\n<p class=\"prose\">Atoms are equal if their names are equal.</p><pre><code class=\"language-geis\">iex&gt; :apple == :apple\ntrue\niex&gt; :apple == :orange\nfalse\n</code></pre>\n<p class=\"prose\">Often they are used to express the state of an operation, by using values such as <code>:ok</code> and <code>:error</code>.</p><p class=\"prose\">The booleans <code>true</code> and <code>false</code> are also atoms:</p><pre><code class=\"language-geis\">iex&gt; true == :true\ntrue\niex&gt; is_atom(false)\ntrue\niex&gt; is_boolean(:false)\ntrue\n</code></pre>\n<p class=\"prose\">Geis allows you to skip the leading <code>:</code> for the atoms <code>false</code>, <code>true</code> and <code>nil</code>.</p><p class=\"prose\">Finally, Geis has a construct called aliases which we will explore later. Aliases start in upper case and are also atoms:</p><pre><code class=\"language-geis\">iex&gt; is_atom(Hello)\ntrue\n</code></pre>\n<h2 id=strings class=\"prose prose-2xl\">Strings</h2><p class=\"prose\">Strings in Geis are delimited by double quotes, and they are encoded in UTF-8:</p><pre><code class=\"language-geis\">iex&gt; &quot;hellö&quot;\n&quot;hellö&quot;\n</code></pre>\n<blockquote>\n<p class=\"prose\">Note: if you are running on Windows, there is a chance your terminal does not use UTF-8 by default. You can change the encoding of your current session by running <code>chcp 65001</code> before entering IEx.</p></blockquote>\n<p class=\"prose\">Geis also supports string interpolation:</p><pre><code class=\"language-geis\">iex&gt; string = :world\niex&gt; &quot;hellö #{string}&quot;\n&quot;hellö world&quot;\n</code></pre>\n<p class=\"prose\">Strings can have line breaks in them. You can introduce them using escape sequences:</p><pre><code class=\"language-geis\">iex&gt; &quot;hello\n...&gt; world&quot;\n&quot;hello\\nworld&quot;\niex&gt; &quot;hello\\nworld&quot;\n&quot;hello\\nworld&quot;\n</code></pre>\n<p class=\"prose\">You can print a string using the <code>IO.puts/1</code> function from the <code>IO</code> module:</p><pre><code class=\"language-geis\">iex&gt; IO.puts &quot;hello\\nworld&quot;\nhello\nworld\n:ok\n</code></pre>\n<p class=\"prose\">Notice that the <code>IO.puts/1</code> function returns the atom <code>:ok</code> after printing.</p><p class=\"prose\">Strings in Geis are represented internally by contiguous sequences of bytes known as binaries:</p><pre><code class=\"language-geis\">iex&gt; is_binary(&quot;hellö&quot;)\ntrue\n</code></pre>\n<p class=\"prose\">We can also get the number of bytes in a string:</p><pre><code class=\"language-geis\">iex&gt; byte_size(&quot;hellö&quot;)\n6\n</code></pre>\n<p class=\"prose\">Notice that the number of bytes in that string is 6, even though it has 5 graphemes. That&#39;s because the grapheme &quot;ö&quot; takes 2 bytes to be represented in UTF-8. We can get the actual length of the string, based on the number of graphemes, by using the <code>String.length/1</code> function:</p><pre><code class=\"language-geis\">iex&gt; String.length(&quot;hellö&quot;)\n5\n</code></pre>\n<p class=\"prose\">The <a href=\"https://hexdocs.pm/geis/String.html\">String module</a> contains a bunch of functions that operate on strings as defined in the Unicode standard:</p><pre><code class=\"language-geis\">iex&gt; String.upcase(&quot;hellö&quot;)\n&quot;HELLÖ&quot;\n</code></pre>\n<h2 id=anonymous-functions class=\"prose prose-2xl\">Anonymous functions</h2><p class=\"prose\">Geis also provides anonymous functions. Anonymous functions allow us to store and pass executable code around as if it was an integer or a string. They are delimited by the keywords <code>fn</code> and <code>end</code>:</p><pre><code class=\"language-geis\">iex&gt; add = fn a, b -&gt; a + b end\n#Function&lt;12.71889879/2 in :erl_eval.expr/5&gt;\niex&gt; add.(1, 2)\n3\niex&gt; is_function(add)\ntrue\n</code></pre>\n<p class=\"prose\">In the example above, we defined an anonymous function that receives two arguments, <code>a</code> and <code>b</code>, and returns the result of <code>a + b</code>. The arguments are always on the left-hand side of <code>-&gt;</code> and the code to be executed on the right-hand side. The anonymous function is stored in the variable <code>add</code>.</p><p class=\"prose\">Parenthesised arguments after the anonymous function indicate that we want the function to be evaluated, not just its definition returned. Note that a dot (<code>.</code>) between the variable and parentheses is required to invoke an anonymous function. The dot ensures there is no ambiguity between calling the anonymous function matched to a variable <code>add</code> and a named function <code>add/2</code>. We will explore named functions when dealing with <a href=\"/getting-started/modules-and-functions.html\">Modules and Functions</a>, since named functions can only be defined within a module. For now, just remember that Geis makes a clear distinction between anonymous functions and named functions.</p><p class=\"prose\">Anonymous functions in Geis are also identified by the number of arguments they receive. We can check if a function is of any given arity by using <code>is_function/2</code>:</p><pre><code class=\"language-geis\"># check if add is a function that expects exactly 2 arguments\niex&gt; is_function(add, 2)\ntrue\n# check if add is a function that expects exactly 1 argument\niex&gt; is_function(add, 1)\nfalse\n</code></pre>\n<p class=\"prose\">Finally, anonymous functions are also closures and as such they can access variables that are in scope when the function is defined. Let&#39;s define a new anonymous function that uses the <code>add</code> anonymous function we have previously defined:</p><pre><code class=\"language-geis\">iex&gt; double = fn a -&gt; add.(a, a) end\n#Function&lt;6.71889879/1 in :erl_eval.expr/5&gt;\niex&gt; double.(2)\n4\n</code></pre>\n<p class=\"prose\">A variable assigned inside a function does not affect its surrounding environment:</p><pre><code class=\"language-geis\">iex&gt; x = 42\n42\niex&gt; (fn -&gt; x = 0 end).()\n0\niex&gt; x\n42\n</code></pre>\n<h2 id=linked-lists class=\"prose prose-2xl\">(Linked) Lists</h2><p class=\"prose\">Geis uses square brackets to specify a list of values. Values can be of any type:</p><pre><code class=\"language-geis\">iex&gt; [1, 2, true, 3]\n[1, 2, true, 3]\niex&gt; length [1, 2, 3]\n3\n</code></pre>\n<p class=\"prose\">Two lists can be concatenated or subtracted using the <code>++/2</code> and <code>--/2</code> operators respectively:</p><pre><code class=\"language-geis\">iex&gt; [1, 2, 3] ++ [4, 5, 6]\n[1, 2, 3, 4, 5, 6]\niex&gt; [1, true, 2, false, 3, true] -- [true, false]\n[1, 2, 3, true]\n</code></pre>\n<p class=\"prose\">List operators never modify the existing list. Concatenating to or removing elements from a list returns a new list. We say that Geis data structures are <em>immutable</em>. One advantage of immutability is that it leads to clearer code. You can freely pass the data around with the guarantee no one will mutate it in memory - only transform it.</p><p class=\"prose\">Throughout the tutorial, we will talk a lot about the head and tail of a list. The head is the first element of a list and the tail is the remainder of the list. They can be retrieved with the functions <code>hd/1</code> and <code>tl/1</code>. Let&#39;s assign a list to a variable and retrieve its head and tail:</p><pre><code class=\"language-geis\">iex&gt; list = [1, 2, 3]\niex&gt; hd(list)\n1\niex&gt; tl(list)\n[2, 3]\n</code></pre>\n<p class=\"prose\">Getting the head or the tail of an empty list throws an error:</p><pre><code class=\"language-geis\">iex&gt; hd []\n** (ArgumentError) argument error\n</code></pre>\n<p class=\"prose\">Sometimes you will create a list and it will return a value in single quotes. For example:</p><pre><code class=\"language-geis\">iex&gt; [11, 12, 13]\n&#x27;\\v\\f\\r&#x27;\niex&gt; [104, 101, 108, 108, 111]\n&#x27;hello&#x27;\n</code></pre>\n<p class=\"prose\">When Geis sees a list of printable ASCII numbers, Geis will print that as a charlist (literally a list of characters). Charlists are quite common when interfacing with existing Erlang code. Whenever you see a value in IEx and you are not quite sure what it is, you can use the <code>i/1</code> to retrieve information about it:</p><pre><code class=\"language-geis\">iex&gt; i &#x27;hello&#x27;\nTerm\n  &#x27;hello&#x27;\nData type\n  List\nDescription\n  ...\nRaw representation\n  [104, 101, 108, 108, 111]\nReference modules\n  List\nImplemented protocols\n  ...\n</code></pre>\n<p class=\"prose\">Keep in mind single-quoted and double-quoted representations are not equivalent in Geis as they are represented by different types:</p><pre><code class=\"language-geis\">iex&gt; &#x27;hello&#x27; == &quot;hello&quot;\nfalse\n</code></pre>\n<p class=\"prose\">Single quotes are charlists, double quotes are strings. We will talk more about them in the <a href=\"/getting-started/binaries-strings-and-char-lists.html\">&quot;Binaries, strings and charlists&quot;</a> chapter.</p><h2 id=tuples class=\"prose prose-2xl\">Tuples</h2><p class=\"prose\">Geis uses curly brackets to define tuples. Like lists, tuples can hold any value:</p><pre><code class=\"language-geis\">iex&gt; {:ok, &quot;hello&quot;}\n{:ok, &quot;hello&quot;}\niex&gt; tuple_size {:ok, &quot;hello&quot;}\n2\n</code></pre>\n<p class=\"prose\">Tuples store elements contiguously in memory. This means accessing a tuple element by index or getting the tuple size is a fast operation. Indexes start from zero:</p><pre><code class=\"language-geis\">iex&gt; tuple = {:ok, &quot;hello&quot;}\n{:ok, &quot;hello&quot;}\niex&gt; elem(tuple, 1)\n&quot;hello&quot;\niex&gt; tuple_size(tuple)\n2\n</code></pre>\n<p class=\"prose\">It is also possible to put an element at a particular index in a tuple with <code>put_elem/3</code>:</p><pre><code class=\"language-geis\">iex&gt; tuple = {:ok, &quot;hello&quot;}\n{:ok, &quot;hello&quot;}\niex&gt; put_elem(tuple, 1, &quot;world&quot;)\n{:ok, &quot;world&quot;}\niex&gt; tuple\n{:ok, &quot;hello&quot;}\n</code></pre>\n<p class=\"prose\">Notice that <code>put_elem/3</code> returned a new tuple. The original tuple stored in the <code>tuple</code> variable was not modified. Like lists, tuples are also immutable. Every operation on a tuple returns a new tuple, it never changes the given one.</p><h2 id=lists-or-tuples class=\"prose prose-2xl\">Lists or tuples?</h2><p class=\"prose\">What is the difference between lists and tuples?</p><p class=\"prose\">Lists are stored in memory as linked lists, meaning that each element in a list holds its value and points to the following element until the end of the list is reached. This means accessing the length of a list is a linear operation: we need to traverse the whole list in order to figure out its size.</p><p class=\"prose\">Similarly, the performance of list concatenation depends on the length of the left-hand list:</p><pre><code class=\"language-geis\">iex&gt; list = [1, 2, 3]\n\n# This is fast as we only need to traverse `[0]` to prepend to `list`\niex&gt; [0] ++ list\n[0, 1, 2, 3]\n\n# This is slow as we need to traverse `list` to append 4\niex&gt; list ++ [4]\n[1, 2, 3, 4]\n</code></pre>\n<p class=\"prose\">Tuples, on the other hand, are stored contiguously in memory. This means getting the tuple size or accessing an element by index is fast. However, updating or adding elements to tuples is expensive because it requires creating a new tuple in memory:</p><pre><code class=\"language-geis\">iex&gt; tuple = {:a, :b, :c, :d}\niex&gt; put_elem(tuple, 2, :e)\n{:a, :b, :e, :d}\n</code></pre>\n<p class=\"prose\">Note that this applies only to the tuple itself, not its contents. For instance, when you update a tuple, all entries are shared between the old and the new tuple, except for the entry that has been replaced. In other words, tuples and lists in Geis are capable of sharing their contents. This reduces the amount of memory allocation the language needs to perform and is only possible thanks to the immutable semantics of the language.</p><p class=\"prose\">Those performance characteristics dictate the usage of those data structures. One very common use case for tuples is to use them to return extra information from a function. For example, <code>File.read/1</code> is a function that can be used to read file contents. It returns a tuple:</p><pre><code class=\"language-geis\">iex&gt; File.read(&quot;path/to/existing/file&quot;)\n{:ok, &quot;... contents ...&quot;}\niex&gt; File.read(&quot;path/to/unknown/file&quot;)\n{:error, :enoent}\n</code></pre>\n<p class=\"prose\">If the path given to <code>File.read/1</code> exists, it returns a tuple with the atom <code>:ok</code> as the first element and the file contents as the second. Otherwise, it returns a tuple with <code>:error</code> and the error description.</p><p class=\"prose\">Most of the time, Geis is going to guide you to do the right thing. For example, there is an <code>elem/2</code> function to access a tuple item but there is no built-in equivalent for lists:</p><pre><code class=\"language-geis\">iex&gt; tuple = {:ok, &quot;hello&quot;}\n{:ok, &quot;hello&quot;}\niex&gt; elem(tuple, 1)\n&quot;hello&quot;\n</code></pre>\n<p class=\"prose\">When counting the elements in a data structure, Geis also abides by a simple rule: the function is named <code>size</code> if the operation is in constant time (i.e. the value is pre-calculated) or <code>length</code> if the operation is linear (i.e. calculating the length gets slower as the input grows). As a mnemonic, both &quot;length&quot; and &quot;linear&quot; start with &quot;l&quot;.</p><p class=\"prose\">For example, we have used 4 counting functions so far: <code>byte_size/1</code> (for the number of bytes in a string), <code>tuple_size/1</code> (for tuple size), <code>length/1</code> (for list length) and <code>String.length/1</code> (for the number of graphemes in a string). We use <code>byte_size</code> to get the number of bytes in a string -- a cheap operation. Retrieving the number of Unicode graphemes, on the other hand, uses <code>String.length</code>, and may be expensive as it relies on a traversal of the entire string.</p><p class=\"prose\">Geis also provides <code>Port</code>, <code>Reference</code>, and <code>PID</code> as data types (usually used in process communication), and we will take a quick look at them when talking about processes. For now, let&#39;s take a look at some of the basic operators that go with our basic types.</p>"},"sections":[{"name":"getting started","guides":[{"number":1,"section":"getting-started","filename":"01-introduction.md","title":"Introduction","slug":"getting-started/introduction"},{"number":2,"section":"getting-started","filename":"02-types.md","title":"Types","slug":"getting-started/types"},{"number":4,"section":"getting-started","filename":"04-protocols.md","title":"Protocols","slug":"getting-started/protocols"},{"number":5,"section":"getting-started","filename":"05-providers.md","title":"Providers","slug":"getting-started/providers"},{"number":6,"section":"getting-started","filename":"06-parsing.md","title":"Parsing","slug":"getting-started/parsing"},{"number":7,"section":"getting-started","filename":"07-errors.md","title":"Error Handling","slug":"getting-started/errors"}]},{"name":"metaprogramming","guides":[{"number":1,"section":"metaprogramming","filename":"01-quote-and-unquote.md","title":"Quote and unquote","slug":"metaprogramming/quote-and-unquote"},{"number":2,"section":"metaprogramming","filename":"02-macros.md","title":"Macros","slug":"metaprogramming/macros"}]}],"releases":[{"title":"Geis v1.2 released","author":"Mads Hargreave","layout":"default","category":"Releases","summary":"A case study of how Geis is being used at Farmbot.","tags":"network","slug":"2021-03-20-release-002","date":"2021-03-20"},{"title":"Geis v1.0 released","author":"Mads Hargreave","layout":"default","category":"Releases","summary":"A case study of how Geis is being used at Farmbot.","tags":"network","slug":"2021-03-18-release-001","date":"2021-03-18"}]},"__N_SSG":true}