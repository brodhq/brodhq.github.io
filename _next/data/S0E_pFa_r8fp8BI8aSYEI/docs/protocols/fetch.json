{"pageProps":{"api":{"number":2,"section":"protocols","filename":"02-fetch.md","title":"Fetch","slug":"protocols/fetch","content":"<h2 id=overview class=\"prose prose-2xl\">Overview</h2><p class=\"prose\">The fetch protocol is designed for fetching and parsing unstructured data over HTTP.</p><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span style=\"color:#c678dd\">const</span><span> url = </span><span style=\"color:#98c379\">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span></span><span style=\"color:#c678dd\">const</span><span> response = fetch(url, </span><span class=\"hljs-function hljs-params\">resp</span><span class=\"hljs-function\"> =&gt;</span><span> \n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>  </span><span style=\"color:#e6c07b\">console</span><span>.log(resp)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span>)\n</code></pre></div><h3 id=fetchtype-url-init-callback class=\"prose prose-xl\">fetch([type?, url, init[]?, callback?])</h3><p class=\"prose\">Send a request</p><ul class=\"prose\"><li class=\"p-1 ml-10\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">type</span> - Set the expected response data type </li><li class=\"p-1 ml-10\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">url</span> - HTTP URL of remote resource</li><li class=\"p-1 ml-10\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">init</span> - A list of fetch configurations</li><li class=\"p-1 ml-10\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">callback</span> - (optional) an optional callback receiving the response</li></ul><h3 id=fetch-options class=\"prose prose-xl\">Fetch options</h3><p class=\"prose\">The fetch options control the behavior of the fetch object. Note that the options object is deeply cloned (with the exception of <a href=\"#fetch.options.listener\"><span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">listener</span></a> which is shallowly copied) and should not contain any values that are unsafe to perform deep copy on.</p><p class=\"prose\">All options are optionals.</p><h4 id=fetchmethodmethod class=\"prose prose-lg\">fetch.method([method])</h4><p class=\"prose\">Set the HTTP method.</p><h5 id=example class=\"prose\">Example</h5><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span style=\"color:#c678dd\">await</span><span> fetch(\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>  </span><span style=\"color:#98c379\">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span><span>,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>  fetch.method(</span><span style=\"color:#98c379\">&#x27;post&#x27;</span><span>)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span>)\n</code></pre></div><h4 id=fetchbodypayload class=\"prose prose-lg\">fetch.body([payload])</h4><p class=\"prose\">Set the HTTP body of the request.</p><h5 id=example-1 class=\"prose\">Example</h5><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span style=\"color:#c678dd\">await</span><span> fetch(\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>  </span><span style=\"color:#98c379\">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span><span>,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span>  fetch.body({\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span><span>    </span><span style=\"color:#d19a66\">data</span><span>: </span><span style=\"color:#56b6c2\">true</span><span>\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">5</span>  })\n<span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">6</span>)\n</code></pre></div><p class=\"prose\">Default value: <span class=\"text-gray-900 bg-primary-50 border border-primary-100 text-sm font-mono px-1 py-0.5\">&amp;#39;GET&amp;#39;</span>.</p><h4 id=fetchheadername-value class=\"prose prose-lg\">fetch.header([name, value])</h4><p class=\"prose\">Set a HTTP header.</p><h5 id=example-2 class=\"prose\">Example</h5><div class=\"block text-sm font-small p-4 rounded-lg shadow-md bg-gray-700 text-gray-400\"><pre style=\"display:block;overflow-x:auto;padding:1rem;color:#abb2bf;background:none;text-align:left;background-color:transparent\"><code class=\"language-typescript\" style=\"white-space:pre\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">1</span><span style=\"color:#c678dd\">await</span><span> fetch(\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">2</span><span>  </span><span style=\"color:#98c379\">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span><span>,\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">3</span><span>  fetch.header(</span><span style=\"color:#98c379\">&#x27;Authorization&#x27;</span><span>, </span><span style=\"color:#98c379\">&#x27;my token&#x27;</span><span>)\n</span><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:1em;text-align:right;user-select:none;margin-right:0.5rem;opacity:0.3\">4</span>)\n</code></pre></div>","subsections":[{"name":"Overview","slug":"overview"},{"name":"fetch([type?, url, init[]?, callback?])","slug":"fetchtype-url-init-callback"},{"name":"Fetch options","slug":"fetch-options"}],"previous":null,"next":{"number":1,"section":"data-types","filename":"01-json.md","title":"Json","slug":"data-types/json"}},"sections":[{"name":"protocols","guides":[{"number":2,"section":"protocols","filename":"02-fetch.md","title":"Fetch","slug":"protocols/fetch"}]},{"name":"data types","guides":[{"number":1,"section":"data-types","filename":"01-json.md","title":"Json","slug":"data-types/json"},{"number":2,"section":"data-types","filename":"02-html.md","title":"Html","slug":"data-types/html"}]}],"releases":[{"title":"Pansar v0.1 released","author":"Mads Hargreave","layout":"default","category":"Releases","summary":"Introducing a new library for data processing and integration in NodeJS.","tags":"network","image":"movie-ready-go.jpg","slug":"release","date":"2021-06-08","content":"\nCommunity is a platform that enables instant and direct communication with the people you want to reach, using the simplicity of text messaging. Used by names like Paul McCartney, Metallica, and Barack Obama, Community connects small businesses, stars, and high-profile individuals directly to their audiences.\n\nCommunity is powered by the Erlang Ecosystem, with Geis and RabbitMQ playing central roles. This article gives an overview of the system and the tools used to handle spikes of million of users caused by events such as this tweet:\n\n## The first steps with Geis\n\nTomas Koci and Ustin Zarubin were the two engineers behind Community’s initial implementation. The company was pivoting from a product they had written in Go and they felt the language was not expressive enough for the products they were building. So when faced with the challenge of developing a social messaging platform on top of SMS, they were open to trying a different stack.\n"}]},"__N_SSG":true}