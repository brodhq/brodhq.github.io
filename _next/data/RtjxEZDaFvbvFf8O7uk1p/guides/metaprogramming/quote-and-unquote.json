{"pageProps":{"guide":{"number":1,"section":"metaprogramming","filename":"01-quote-and-unquote.md","title":"Quote and unquote","slug":"metaprogramming/quote-and-unquote","subsections":[{"name":"Quoting","slug":"quoting"},{"name":"Unquoting","slug":"unquoting"},{"name":"Escaping","slug":"escaping"}],"content":"<p class=\"prose\">This guide aims to introduce the meta-programming techniques available in Geis. The ability to represent an Geis program by its own data structures is at the heart of meta-programming. This chapter starts by exploring those structures and the associated <code class=\"prose px-1 bg-purple-50 text-purple-900\">quote</code> and <code class=\"prose px-1 bg-purple-50 text-purple-900\">unquote</code> constructs, so we can take a look at macros in the next chapter and finally build our own domain specific language.</p><blockquote>\n<p class=\"prose\">The Geis guides are also available in EPUB format:</p><ul><li class=\"p-1 ml-10\">  <a href=\"https://repo.hex.pm/guides/elixir/elixir-getting-started-guide.epub\">Getting started guide</a></li><li class=\"p-1 ml-10\">  <a href=\"https://repo.hex.pm/guides/elixir/mix-and-otp.epub\">Mix and OTP guide</a></li><li class=\"p-1 ml-10\">  <a href=\"https://repo.hex.pm/guides/elixir/meta-programming-in-elixir.epub\">Meta-programming guide</a></li></ul></blockquote>\n<h2 id=quoting class=\"prose prose-2xl\">Quoting</h2><p class=\"prose\">The building block of an Geis program is a tuple with three elements. For example, the function call <code class=\"prose px-1 bg-purple-50 text-purple-900\">sum(1, 2, 3)</code> is represented internally as:</p><pre><code class=\"language-elixir\">{:sum, [], [1, 2, 3]}\n</code></pre>\n<p class=\"prose\">You can get the representation of any expression by using the <code class=\"prose px-1 bg-purple-50 text-purple-900\">quote</code> macro:</p><pre><code class=\"language-elixir\">iex&gt; quote do: sum(1, 2, 3)\n{:sum, [], [1, 2, 3]}\n</code></pre>\n<p class=\"prose\">The first element is the function name, the second is a keyword list containing metadata and the third is the arguments list.</p><p class=\"prose\">Operators are also represented as such tuples:</p><pre><code class=\"language-elixir\">iex&gt; quote do: 1 + 2\n{:+, [context: Geis, import: Kernel], [1, 2]}\n</code></pre>\n<p class=\"prose\">Even a map is represented as a call to <code class=\"prose px-1 bg-purple-50 text-purple-900\">%{}</code>:</p><pre><code class=\"language-elixir\">iex&gt; quote do: %{1 =&gt; 2}\n{:%{}, [], [{1, 2}]}\n</code></pre>\n<p class=\"prose\">Variables are also represented using such triplets, except the last element is an atom, instead of a list:</p><pre><code class=\"language-elixir\">iex&gt; quote do: x\n{:x, [], Geis}\n</code></pre>\n<p class=\"prose\">When quoting more complex expressions, we can see that the code is represented in such tuples, which are often nested inside each other in a structure resembling a tree. Many languages would call such representations an Abstract Syntax Tree (AST). Geis calls them quoted expressions:</p><pre><code class=\"language-elixir\">iex&gt; quote do: sum(1, 2 + 3, 4)\n{:sum, [], [1, {:+, [context: Geis, import: Kernel], [2, 3]}, 4]}\n</code></pre>\n<p class=\"prose\">Sometimes when working with quoted expressions, it may be useful to get the textual code representation back. This can be done with <code class=\"prose px-1 bg-purple-50 text-purple-900\">Macro.to_string/1</code>:</p><pre><code class=\"language-elixir\">iex&gt; Macro.to_string(quote do: sum(1, 2 + 3, 4))\n&quot;sum(1, 2 + 3, 4)&quot;\n</code></pre>\n<p class=\"prose\">In general, the tuples above are structured according to the following format:</p><pre><code class=\"language-elixir\">{atom | tuple, list, list | atom}\n</code></pre>\n<ul><li class=\"p-1 ml-10\">  The first element is an atom or another tuple in the same representation;</li><li class=\"p-1 ml-10\">  The second element is a keyword list containing metadata, like numbers and contexts;</li><li class=\"p-1 ml-10\">  The third element is either a list of arguments for the function call or an atom. When this element is an atom, it means the tuple represents a variable.</li></ul><p class=\"prose\">Besides the tuple defined above, there are five Geis literals that, when quoted, return themselves (and not a tuple). They are:</p><pre><code class=\"language-elixir\">:sum         #=&gt; Atoms\n1.0          #=&gt; Numbers\n[1, 2]       #=&gt; Lists\n&quot;strings&quot;    #=&gt; Strings\n{key, value} #=&gt; Tuples with two elements\n</code></pre>\n<p class=\"prose\">Most Geis code has a straight-forward translation to its underlying quoted expression. We recommend you try out different code samples and see what the results are. For example, what does <code class=\"prose px-1 bg-purple-50 text-purple-900\">String.upcase(&quot;foo&quot;)</code> expand to? We have also learned that <code class=\"prose px-1 bg-purple-50 text-purple-900\">if(true, do: :this, else: :that)</code> is the same as <code class=\"prose px-1 bg-purple-50 text-purple-900\">if true do :this else :that end</code>. How does this affirmation hold with quoted expressions?</p><h2 id=unquoting class=\"prose prose-2xl\">Unquoting</h2><p class=\"prose\">Quote is about retrieving the inner representation of some particular chunk of code. However, sometimes it may be necessary to inject some other particular chunk of code inside the representation we want to retrieve.</p><p class=\"prose\">For example, imagine you have a variable <code class=\"prose px-1 bg-purple-50 text-purple-900\">number</code> which contains the number you want to inject inside a quoted expression.</p><pre><code class=\"language-elixir\">iex&gt; number = 13\niex&gt; Macro.to_string(quote do: 11 + number)\n&quot;11 + number&quot;\n</code></pre>\n<p class=\"prose\">That&#39;s not what we wanted, since the value of the <code class=\"prose px-1 bg-purple-50 text-purple-900\">number</code> variable has not been injected and <code class=\"prose px-1 bg-purple-50 text-purple-900\">number</code> has been quoted in the expression. In order to inject the <em>value</em> of the <code class=\"prose px-1 bg-purple-50 text-purple-900\">number</code> variable, <code class=\"prose px-1 bg-purple-50 text-purple-900\">unquote</code> has to be used inside the quoted representation:</p><pre><code class=\"language-elixir\">iex&gt; number = 13\niex&gt; Macro.to_string(quote do: 11 + unquote(number))\n&quot;11 + 13&quot;\n</code></pre>\n<p class=\"prose\"><code class=\"prose px-1 bg-purple-50 text-purple-900\">unquote</code> can even be used to inject function names:</p><pre><code class=\"language-elixir\">iex&gt; fun = :hello\niex&gt; Macro.to_string(quote do: unquote(fun)(:world))\n&quot;hello(:world)&quot;\n</code></pre>\n<p class=\"prose\">In some cases, it may be necessary to inject many values inside a list. For example, imagine you have a list containing <code class=\"prose px-1 bg-purple-50 text-purple-900\">[1, 2, 6]</code> and we want to inject <code class=\"prose px-1 bg-purple-50 text-purple-900\">[3, 4, 5]</code> into it. Using <code class=\"prose px-1 bg-purple-50 text-purple-900\">unquote</code> won&#39;t yield the desired result:</p><pre><code class=\"language-elixir\">iex&gt; inner = [3, 4, 5]\niex&gt; Macro.to_string(quote do: [1, 2, unquote(inner), 6])\n&quot;[1, 2, [3, 4, 5], 6]&quot;\n</code></pre>\n<p class=\"prose\">That&#39;s when <code class=\"prose px-1 bg-purple-50 text-purple-900\">unquote_splicing</code> becomes handy:</p><pre><code class=\"language-elixir\">iex&gt; inner = [3, 4, 5]\niex&gt; Macro.to_string(quote do: [1, 2, unquote_splicing(inner), 6])\n&quot;[1, 2, 3, 4, 5, 6]&quot;\n</code></pre>\n<p class=\"prose\">Unquoting is very useful when working with macros. When writing macros, developers are able to receive code chunks and inject them inside other code chunks, which can be used to transform code or write code that generates code during compilation.</p><h2 id=escaping class=\"prose prose-2xl\">Escaping</h2><p class=\"prose\">As we saw at the beginning of this chapter, only some values are valid quoted expressions in Geis. For example, a map is not a valid quoted expression. Neither is a tuple with four elements. However, such values <em>can</em> be expressed as a quoted expression:</p><pre><code class=\"language-elixir\">iex&gt; quote do: %{1 =&gt; 2}\n{:%{}, [], [{1, 2}]}\n</code></pre>\n<p class=\"prose\">In some cases, you may need to inject such <em>values</em> into <em>quoted expressions</em>. To do that, we need to first escape those values into quoted expressions with the help of <code class=\"prose px-1 bg-purple-50 text-purple-900\">Macro.escape/1</code>:</p><pre><code class=\"language-elixir\">iex&gt; map = %{hello: :world}\niex&gt; Macro.escape(map)\n{:%{}, [], [hello: :world]}\n</code></pre>\n<p class=\"prose\">Macros receive quoted expressions and must return quoted expressions. However, sometimes during the execution of a macro, you may need to work with values and making a distinction between values and quoted expressions will be required.</p><p class=\"prose\">In other words, it is important to make a distinction between a regular Geis value (like a list, a map, a process, a reference, etc) and a quoted expression. Some values, such as integers, atoms, and strings, have a quoted expression equal to the value itself. Other values, like maps, need to be explicitly converted. Finally, values like functions and references cannot be converted to a quoted expression at all.</p><p class=\"prose\">You can read more about <code class=\"prose px-1 bg-purple-50 text-purple-900\">quote</code> and <code class=\"prose px-1 bg-purple-50 text-purple-900\">unquote</code> in the <a href=\"https://hexdocs.pm/elixir/Kernel.SpecialForms.html\"><code class=\"prose px-1 bg-purple-50 text-purple-900\">Kernel.SpecialForms</code> module</a>. Documentation for <code class=\"prose px-1 bg-purple-50 text-purple-900\">Macro.escape/1</code> and other functions related to quoted expressions can be found in the <a href=\"https://hexdocs.pm/elixir/Macro.html\"><code class=\"prose px-1 bg-purple-50 text-purple-900\">Macro</code> module</a>.</p><p class=\"prose\">In this introduction, we have laid the groundwork to finally write our first macro, so let&#39;s move to the next chapter.</p>"},"sections":[{"name":"getting started","guides":[{"number":1,"section":"getting-started","filename":"01-introduction.md","title":"Introduction","slug":"getting-started/introduction"},{"number":2,"section":"getting-started","filename":"02-basic-types.md","title":"Basic types","slug":"getting-started/basic-types"},{"number":3,"section":"getting-started","filename":"03-basic-operators.md","title":"Basic operators","slug":"getting-started/basic-operators"},{"number":4,"section":"getting-started","filename":"04-keyword-lists-and-maps.md","title":"Keyword lists and maps","slug":"getting-started/keyword-lists-and-maps"},{"number":5,"section":"getting-started","filename":"05-enumerables-and-streams.md","title":"Enumerables and streams","slug":"getting-started/enumerables-and-streams"}]},{"name":"metaprogramming","guides":[{"number":1,"section":"metaprogramming","filename":"01-quote-and-unquote.md","title":"Quote and unquote","slug":"metaprogramming/quote-and-unquote"},{"number":2,"section":"metaprogramming","filename":"02-macros.md","title":"Macros","slug":"metaprogramming/macros"}]}],"releases":[{"title":"Geis v1.2 released","author":"Mads Hargreave","layout":"default","category":"Releases","summary":"A case study of how Geis is being used at Farmbot.","tags":"network","slug":"2021-03-20-release-002","date":"2021-03-20"},{"title":"Geis v1.0 released","author":"Mads Hargreave","layout":"default","category":"Releases","summary":"A case study of how Geis is being used at Farmbot.","tags":"network","slug":"2021-03-18-release-001","date":"2021-03-18"}]},"__N_SSG":true}